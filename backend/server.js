const express = require('express');
const cors = require('cors');
const app = express();
const bodyParser = require('body-parser'); 
const mysql2 = require('mysql2/promise');  
const mysql = require('mysql');
const multer = require('multer');
const storage = multer.memoryStorage(); // ‡πÉ‡∏ä‡πâ memoryStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô buffer
const JsBarcode = require('jsbarcode');
const xlsx = require('xlsx');  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡πÑ‡∏ü‡∏•‡πå
const { createCanvas } = require('canvas'); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á SVG
const moment = require('moment');
const path = require('path');
const fs = require('fs');
app.use(bodyParser.json()); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON 
app.use(bodyParser.urlencoded({ extended: true })); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö URL encoded

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /reports ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
const uploadDir = path.join(__dirname, "reports");
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /report_return_late ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
const uploadDirRelate = path.join(__dirname, "reports_return_late");
if (!fs.existsSync(uploadDirRelate)) {
  fs.mkdirSync(uploadDirRelate, { recursive: true });
}


// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /reports/
const storageReport = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå reports
  },
  filename: (req, file, cb) => {
    cb(null, file.originalname); // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
  },
});

const storageReLate = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDirRelate); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå reports
  },
  filename: (req, file, cb) => {
    cb(null, file.originalname); // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
  },
});

const upload = multer({ storage: storage });
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

app.use(express.json());
app.use(cors())
app.use(cors({
  origin: ['http://localhost:5173'], //, 'http://10.198.200.35:5173' ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
  methods: ['GET', 'POST' ,'PUT' , 'PATCH'],
  credentials: true
})); 

require('dotenv').config(); 
const db = {
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT
};
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
const connection = mysql.createConnection(db);
console.log(db); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ


// let connection;

// function handleDisconnect() {
//   connection = mysql.createConnection(db);

//   connection.connect((err) => {
//     if (err) {
//       console.error('‚ùå Database connection failed:', err);
//       setTimeout(handleDisconnect, 2000); // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
//     } else {
//       console.log('‚úÖ Database connected!');
//     }
//   });

//   connection.on('error', (err) => {
//     console.error('‚ö†Ô∏è MySQL error', err);
//     if (err.code === 'PROTOCOL_CONNECTION_LOST') {
//       console.log('üîÑ Reconnecting to MySQL...');
//       handleDisconnect(); // ‡∏£‡∏µ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
//     } else {
//       throw err;
//     }
//   });
// }

// handleDisconnect();

// module.exports = connection; 

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
connection.connect((err) => {
    if (err) {
        console.error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + err.stack);
        return;
    }
    console.log('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + connection.threadId);
});

app.listen(5002, "0.0.0.0", () => {
  console.log('Server is listening on port 5002')
})



// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•


app.post('/register', async (req, res) => {
  const { stu_no, stu_fname, stu_lname, stu_email, password, stu_id, stu_idcard, stu_faculty, college_years, stu_phone } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
  if (!stu_no || !stu_fname || !stu_lname || !stu_email || !password || !stu_id || !stu_idcard || !stu_faculty || !college_years || !stu_phone) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ì‡∏∞‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const facultyQuery = `SELECT id FROM faculty WHERE faculty_name = ?`;

    connection.query(facultyQuery, [stu_faculty], (err, results) => {
      if (err) {
        console.error('Error checking faculty:', err.stack);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ì‡∏∞' });
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô faculty ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á error ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (results.length === 0) {
        return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
      }

      // ‡∏î‡∏∂‡∏á faculty_id ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á faculty
      const facultyId = results[0].id;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á facultyId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!facultyId) {
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î faculty_id ‡πÄ‡∏õ‡πá‡∏ô NULL' });
      }

      // SQL Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (stu_barcode = NULL)
      const insertQuery = `INSERT INTO studentdetail (stu_no, stu_fname, stu_lname, stu_email, password, stu_id, stu_idcard, stu_faculty, college_years, stu_phone, stu_barcode) 
                           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)`;

      const values = [stu_no, stu_fname, stu_lname, stu_email, password, stu_id, stu_idcard, facultyId, college_years, stu_phone];

      connection.query(insertQuery, values, (err, result) => {
        if (err) {
          console.error('Error inserting data:', err.stack);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }
        res.status(201).json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', userId: result.insertId });
      });
    });

  } catch (error) {
    console.error('Server error:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
});


/*####################################### Student ##############################################*/

// Endpoint Login 
app.post('/login', (req, res) => {
  const { email, password } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!email || !password) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤' });
  }

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const stuQuery = `SELECT * FROM studentdetail WHERE stu_email = ? AND password = ?`;
  const values = [email, password];

  connection.query(stuQuery, values, (err, result) => {
    if (err) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', err.message);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô studentdetail ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    if (result.length > 0) {
      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á response ‡∏à‡∏≤‡∏Å Backend
      return res.status(200).json({
        message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
        role: 'student',// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role
        stu_email: email, // ‡∏™‡πà‡∏á stu_email ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ 
        redirectUrls: `http://localhost:5002/StuHome?stu_email=${email}` // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array
      });

    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô studentdetail ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á officer
    const officerQuery = `SELECT * FROM officer WHERE officer_email = ? AND password = ?`;
    connection.query(officerQuery, values, (err, officerResult) => {
      if (err) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', err.message);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
      }

      // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô officer ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      if (officerResult.length > 0) {
        return res.status(200).json({
          message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô',
          role: 'admin', // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role
          officer_email: email, // ‡∏™‡πà‡∏á officer_email ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
          redirectUrls: `http://localhost:5002/admin/Home?officer_email=${email}` // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array
        });
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô studentdetail ‡πÅ‡∏•‡∏∞ officer
      return res.status(401).json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    });
  });
});

// API: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
app.post("/checkPin", (req, res) => {
  const { email, pin } = req.body;

  if ( !email ) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≤' });
  }
  if ( !pin ) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏pin' });
  }

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Officer ‡∏à‡∏≤‡∏Å email
  connection.query("SELECT password FROM officer WHERE officer_email = ?", [email], (error, rows) => {
    if (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL:", error);
      return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", error: error.message });
    }

    if (rows.length === 0) {
      return res.json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà" });
    }

    const storedPassword = rows[0].password; // ‡∏î‡∏∂‡∏á password ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    console.log("‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", storedPassword);  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    if (pin === storedPassword) {
      return res.json({ success: true, message: "PIN ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    } else {
      return res.json({ success: false, message: "PIN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }
  });
});

// Endpoint ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡πÄ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å student
app.get('/StuHome', (req, res) => {
  const { stu_email } = req.query; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ stu_email ‡∏à‡∏≤‡∏Å query string

  if (!stu_email) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ stu_email' });
  }

  const facultyQuery = `
    SELECT 
      f.faculty_name,
      f.faculty_engName,  
      f.number,
      f.Amount_borrowed
    FROM 
      studentdetail s
    LEFT JOIN 
      faculty_subject fs ON s.stu_faculty = fs.subjectId
    LEFT JOIN 
      faculty f ON fs.facultyId  = f.id
    WHERE 
      s.stu_email = ?
  `;

  const borrowHistoryQuery = `
    SELECT 
      b.borrow_id,
      b.request_date,
      b.borrow_date,
      b.return_date,
      b.renew_date,
      b.status,
      b.document,
      b.laptop_tag,
      witness.stu_fname AS witness_fname,
      witness.stu_lname AS witness_lname
    FROM 
      borrow b
    LEFT JOIN 
      studentdetail witness ON b.witness = witness.stu_id
    LEFT  JOIN 
      studentdetail s ON b.stu_id = s.stu_id
    WHERE 
      s.stu_email = ?;
  `;

  const controlRequestQuery = `
    SELECT 
      control_id,
      start,
      end,
      status
    FROM 
      control_request
    ORDER BY 
      control_id DESC limit 1;
  `;

  const facultyDataPromise = new Promise((resolve, reject) => {
    connection.query(facultyQuery, [stu_email], (err, results) => {
      if (err) {
        console.error('Error fetching faculty data:', err);
        return reject(err);
      }
      if (results.length === 0) {
        console.warn(`No faculty data found for email: ${stu_email}`);
      }
      resolve(results);
    });
  });

  const borrowHistoryPromise = new Promise((resolve, reject) => {
    connection.query(borrowHistoryQuery, [stu_email], (err, results) => {
      if (err) return reject(err);
      resolve(results);
    });
  });

  // ‡πÉ‡∏ä‡πâ Promise.all ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô Query ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  Promise.all([facultyDataPromise, borrowHistoryPromise])
    .then(([facultyDataResults, borrowHistoryResults]) => {
      if (!facultyDataResults.length && !borrowHistoryResults.length) {
        return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
      }

      res.json({
        facultyData: facultyDataResults,
        borrowHistory: borrowHistoryResults,

      });
    })
    .catch((error) => {
      console.error('Error fetching data:', error);
      res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', details: error });
    });
});

/// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (nav student)
app.get('/borrowStuData', (req, res) => {
  const stu_email = req.query.stu_email;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ stu_email ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!stu_email) {
    return res.status(400).json({ error: 'Student email is required' });
  }

  const selectStudentQuery = `
  SELECT 
      stu_id, 
      stu_fname, 
      stu_lname,
      stu_idcard, 
      f.faculty_name 
  FROM 
      studentdetail s
  LEFT JOIN 
      faculty_subject fs ON s.stu_faculty = fs.subjectId
  LEFT JOIN 
      faculty f ON fs.facultyId = f.id
  WHERE 
      s.stu_email = ?;

  `;

  connection.query(selectStudentQuery, [stu_email], (err, result) => {
    if (err) return res.status(500).send(err);

    //console.log('Query Results:', result); // Debugging

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if (result.length === 0) {
      return res.status(404).json({ error: 'No student data found' });
    }

    res.json(result);
  });
});

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
app.get('/navOfficerData', (req, res) => {
  const officer_email = req.query.officer_email;

  //console.log('Officer Email:', officer_email); // Debugging

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ officer_email ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!officer_email) {
    return res.status(400).json({ error: 'Officer email is required' });
  }

  const selectOfficerQuery = `
    SELECT 
      officer_id, 
      officer_fname, 
      officer_lname, 
      officer_email 
    FROM officer 
    WHERE officer_email = ?;
  `;

  connection.query(selectOfficerQuery, [officer_email], (err, results) => {
    if (err) {
      console.error('Database Error:', err); // Debugging
      return res.status(500).send(err);
    }

    //console.log('Query Results:', results); // Debugging

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if (results.length === 0) {
      return res.status(404).json({ error: 'No officer data found' });
    }

    res.json(results);
  });
});


// Endpoint  ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏®. 
app.post('/borrow', upload.single('document'), (req, res) => {
  const { stu_phone, witness } = req.body;
  const request_date = new Date();
  const stu_email = req.body.stu_email;

  if (!req.file) {
    return res.status(400).json({ status: 'error', message: 'No file uploaded' });
  }

  if (!req.file.buffer) {
    return res.status(400).json({ status: 'error', message: 'File buffer is empty' });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô control_request
  const checkControlRequestQuery = `
    SELECT start, end 
    FROM control_request 
    ORDER BY control_id DESC 
    LIMIT 1
  `;

  connection.query(checkControlRequestQuery, (err, controlResult) => {
    if (err) return res.status(500).json({ status: 'error', message: 'Database error', error: err });

    if (controlResult.length === 0) {
      return res.status(400).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ' });
    }

    const { start, end } = controlResult[0];
    const currentTime = new Date();

    if (currentTime < new Date(start) || currentTime > new Date(end)) {
      return res.status(400).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á' });
    }

    // ‡∏î‡∏∂‡∏á stu_id ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    const selectStudentQuery = 'SELECT stu_id FROM studentdetail WHERE stu_email = ?';
    connection.query(selectStudentQuery, [stu_email], (err, studentResult) => {
      if (err) return res.status(500).json({ status: 'error', message: 'Database error', error: err });

      if (studentResult.length === 0) {
        return res.status(400).json({ status: 'error', message: 'Student not found' });
      }

      const stu_id = studentResult[0].stu_id;
      if (!stu_id) {
        return res.status(400).json({ status: 'error', message: 'Student ID cannot be null' });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ô
      const selectWitnessQuery = 'SELECT stu_id FROM studentdetail WHERE stu_id = ?';
      connection.query(selectWitnessQuery, [witness], (err, witnessResult) => {
        if (err) return res.status(500).json({ status: 'error', message: 'Database error', error: err });

        if (witnessResult.length === 0) {
          return res.status(400).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏ô' });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞
        const checkFacultyQuery = `
    SELECT 
        f.number, 
        COUNT(b.borrow_id) AS Amount_borrowed
    FROM 
        faculty f
    LEFT JOIN 
        faculty_subject fs ON f.id = fs.facultyId
    LEFT JOIN 
        studentdetail sd ON fs.subjectId = sd.stu_faculty
    LEFT JOIN 
        borrow b ON sd.stu_id = b.stu_id
    WHERE 
        sd.stu_id = ?  
    GROUP BY 
        f.number;
`;

        
        connection.query(checkFacultyQuery,  [stu_id], (err, facultyResult) => {
          if (err) return res.status(500).json({ status: 'error', message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠', error: err });

          if (facultyResult.length > 0) {
            const { number, Amount_borrowed } = facultyResult[0];

            if (Amount_borrowed >= number) {
              return res.status(400).json({
                status: 'error',
                message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï'
              });
            }
          }

          const fileExtension = path.extname(req.file.originalname);
          const fileName = `${stu_id}${fileExtension}`;
          const fileUrl = `/uploads/documents/${fileName}`;
          const filePath = path.join(__dirname, 'uploads', 'documents', fileName);

          fs.writeFile(filePath, req.file.buffer, (err) => {
            if (err) {
              return res.status(500).json({ status: 'error', message: 'Error saving file to server' });
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const checkBorrowQuery = `
              SELECT status 
              FROM borrow 
              WHERE stu_id = ? 
              ORDER BY request_date DESC 
              LIMIT 1
            `;

            connection.query(checkBorrowQuery, [stu_id], (err, borrowResult) => {
              if (err) return res.status(500).json({ status: 'error', message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', error: err });

              if (borrowResult.length > 0) {
                const latestStatus = borrowResult[0].status ? borrowResult[0].status.trim() : '';

                if (latestStatus !== '‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') {
                  return res.status(400).json({ status: 'error', message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡πâ‡∏ß.' });
                }
              }

              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
              const updateQuery = 'UPDATE studentdetail SET stu_phone = ? WHERE stu_email = ?';
              connection.query(updateQuery, [stu_phone, stu_email], (err) => {
                if (err) return res.status(500).json({ status: 'error', message: 'Database error', error: err });

                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ database
                const insertQuery = 'INSERT INTO borrow (stu_id, witness, request_date, document) VALUES (?, ?, ?, ?)';
                connection.query(insertQuery, [stu_id, witness, request_date, fileUrl], (err) => {
                  if (err) return res.status(500).json({ status: 'error', message: 'Database error', error: err });

                  const responseData = {
                    status: 'success',
                    message: '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à !',
                    redirectUrl: `http://10.198.200.35:5173/ReqHistory?stu_email=${stu_email}`
                  };

                  //console.log("‚úÖ Sending Response:", responseData); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Console ‡∏Ç‡∏≠‡∏á Backend
                  return res.status(200).json(responseData);
                });
              });
            });
          });
        });
      });
    });
  });
});




// ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å
app.get('/reqHistory', (req, res) => {
  const stu_email = req.query.stu_email;

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const query = `
    SELECT 
      b.borrow_id, 
      b.renew_date,
      b.request_date, 
      b.borrow_date, 
      b.return_date, 
      b.document AS document,
      b.witness, 
      b.laptop_tag, 
      b.status,
      borrower.stu_fname AS borrower_fname, 
      borrower.stu_lname AS borrower_lname, 
      borrower.stu_id AS borrower_id,
      borrower.stu_faculty AS borrower_faculty, 
      faculty_borrower.faculty_name AS borrower_facultyname,
      borrower.stu_email AS borrower_email, 
      borrower.stu_phone AS borrower_phone,
      witness.stu_fname AS witness_fname, 
      witness.stu_lname AS witness_lname, 
      witness.stu_id AS witness_id,
      witness.stu_faculty AS witness_faculty,
      faculty_witness.faculty_name AS witness_facultyname, 
      witness.stu_email AS witness_email, 
      witness.stu_phone AS witness_phone,
      laptop.brand AS laptop_brand,
      laptop.model AS laptop_model,
      laptop.serial_number AS laptop_serial_number,
      laptop.cpu AS laptop_cpu,
      laptop.ram AS laptop_ram,
      laptop.storage AS laptop_storage,
      laptop.storage_type AS laptop_storage_type,
      laptop.display AS laptop_display,
      laptop.gpu AS laptop_gpu,
      laptop.os AS laptop_os
    FROM borrow b
    JOIN studentdetail borrower ON b.stu_id = borrower.stu_id
    LEFT JOIN studentdetail witness ON b.witness = witness.stu_id
    LEFT JOIN faculty_subject fs ON borrower.stu_faculty = fs.subjectId  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject
    LEFT JOIN faculty faculty_borrower ON fs.facultyId = faculty_borrower.id -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
    LEFT JOIN faculty_subject fs_witness ON witness.stu_faculty = fs_witness.subjectId -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject ‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ô
    LEFT JOIN faculty faculty_witness ON fs_witness.facultyId = faculty_witness.id -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ô
    LEFT JOIN laptop ON b.laptop_tag = laptop.laptop_tag -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á laptop ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ laptop_tag
    WHERE borrower.stu_email = ?;

  `;

  connection.query(query, [stu_email], (err, result) => {
    if (err) return res.status(500).send(err);

    if (result.length > 0) {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
      res.json(result);
    } else {
      res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°' });
    }
  });
});


// API: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° ‡∏´‡∏ô‡πâ‡∏≤ DetailsReq admin
app.get('/detailsReq/:borrowId', (req, res) => {
  const borrowId = req.params.borrowId; // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ borrowId ‡∏à‡∏≤‡∏Å URL path

  if (!borrowId) {
    return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ borrowId" });
  }

  const query = `
    SELECT 
      b.borrow_id, 
      b.renew_date,
      b.request_date, 
      b.borrow_date, 
      b.return_date, 
      b.document, 
      b.witness, 
      b.laptop_tag, 
      b.status,
      laptop.laptop_tag,
      laptop.serial_number,
      laptop.model,
      laptop.barcode_id,
      borrower.stu_fname AS borrower_fname, 
      borrower.stu_lname AS borrower_lname, 
      borrower.stu_id AS borrower_id,
      borrower.stu_faculty AS borrower_faculty_id, 
      borrower_faculty.faculty_name AS borrower_faculty_name,
      borrower.stu_email AS borrower_email, 
      borrower.stu_phone AS borrower_phone,
      witness.stu_fname AS witness_fname, 
      witness.stu_lname AS witness_lname, 
      witness.stu_id AS witness_id,
      witness.stu_faculty AS witness_faculty_id, 
      witness_faculty.faculty_name AS witness_faculty_name,
      witness.stu_email AS witness_email, 
      witness.stu_phone AS witness_phone
    FROM borrow b
    JOIN studentdetail borrower ON b.stu_id = borrower.stu_id
    LEFT JOIN laptop ON b.laptop_tag = laptop.laptop_tag
    LEFT JOIN faculty_subject fs ON borrower.stu_faculty = fs.subjectId -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
    LEFT JOIN faculty borrower_faculty ON fs.facultyId = borrower_faculty.id -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
    LEFT JOIN studentdetail witness ON b.witness = witness.stu_id
    LEFT JOIN faculty_subject fs_witness ON witness.stu_faculty = fs_witness.subjectId -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏ô
    LEFT JOIN faculty witness_faculty ON fs_witness.facultyId = witness_faculty.id -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ô
    WHERE b.borrow_id = ?;
  `;

  connection.query(query, [borrowId], (err, result) => {
    if (err) {
      console.error("Database error:", err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (result.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°' });
    }

    const data = result[0];
    return res.json({
      borrowId: data.borrow_id,
      borrower: {
        fname: data.borrower_fname,
        lname: data.borrower_lname,
        id: data.borrower_id,
        faculty: {
          id: data.borrower_faculty_id,
          name: data.borrower_faculty_name,
        },
        email: data.borrower_email,
        phone: data.borrower_phone,
      },
      witness: data.witness_id
        ? {
            fname: data.witness_fname,
            lname: data.witness_lname,
            id: data.witness_id,
            faculty: {
              id: data.witness_faculty_id,
              name: data.witness_faculty_name,
            },
            email: data.witness_email,
            phone: data.witness_phone,
          }
        : null, // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¢‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ `null`
      borrowInfo: {
        requestDate: data.request_date,
        borrowDate: data.borrow_date,
        returnDate: data.return_date,
        renewDate: data.renew_date,
        status: data.status,
      },
      notebookInfo: {
        laptopTag: data.laptop_tag,
        serialNumber: data.serial_number,
        model: data.model,
        barcodeId: data.barcode_id
      },
    });
  });
});





/*************************** ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà *********************/

// API: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
const generateBarcode = (barcode_id) => {
  return new Promise((resolve, reject) => {
    const canvas = createCanvas();
    JsBarcode(canvas, barcode_id, {
      format: 'CODE128',
      displayValue: true,
    });

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'uploads/barcodes'
    const filePath = path.join(__dirname, 'uploads', 'barcodes', `${barcode_id}.png`);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô PNG
    const out = fs.createWriteStream(filePath);
    const stream = canvas.createPNGStream();
    stream.pipe(out);

    out.on('finish', () => {
      //‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô relative ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const relativePath = path.relative(__dirname, filePath);
      resolve(relativePath); // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô relative path
    });

    out.on('error', (err) => {
      reject(err);
    });
  });
};

// API: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
const createBarcodes = async (number, maxLaptopTag, data) => {
  const values = [];
  const barcodeIds = new Set();
  let laptopCounter = parseInt(maxLaptopTag.replace('NBKKU', '')) + 1;

  for (let i = 0; i < number; i++) {
    let barcode_id = '30000098'; // ‡∏ü‡∏¥‡∏Å‡πÄ‡∏•‡∏Ç 9 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

    for (let j = 0; j < 5; j++) {
      barcode_id += Math.floor(Math.random() * 10).toString(); // ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 5 ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á
    }

    if (!barcodeIds.has(barcode_id)) {
      barcodeIds.add(barcode_id);

      const laptop_tag = `NBKKU${laptopCounter.toString().padStart(4, '0')}`;
      const barcode_img_path = await generateBarcode(barcode_id); // ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ status ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô "‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
      const status = '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö';

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡πÉ‡∏ô values
      values.push([
        barcode_id,
        laptop_tag,
        data.brand,
        data.model,
        data.serial_number,
        data.cpu,
        data.ram,
        data.storage,
        data.storage_type,
        data.gpu,
        data.display,
        data.os,
        data.insurance_date,
        data.warranty_expiry_date,
        data.price,
        barcode_img_path, // ‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
        status, // ‡∏Ñ‡πà‡∏≤ status
        number,
      ]);

      laptopCounter++;
    }
  }
  return values;
};



// API: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πâ‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ü‡∏•‡πå Excel
app.post("/laptopUpload", upload.single("file"), async (req, res) => {
  console.log("Received file:", req.file);
  const { insurance_date, warranty_expiry_date } = req.body; // ‡∏î‡∏∂‡∏á insurance_date ‡πÅ‡∏•‡∏∞ warranty_expiry_date ‡∏à‡∏≤‡∏Å req.body

  if (!req.file) {
    return res.status(400).send("No file uploaded");
  }

  if (!insurance_date || !warranty_expiry_date) {
    return res.status(400).send("Insurance date and warranty expiry date are required");
  }

  try {
    // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏à‡∏≤‡∏Å buffer
    const workbook = xlsx.read(req.file.buffer, { type: 'buffer' });
    const sheetNames = workbook.SheetNames;
    console.log("Sheet names:", sheetNames);

    let allData = [];
    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ sheet
    sheetNames.forEach((sheetName) => {
      const sheet = workbook.Sheets[sheetName];
      let data = xlsx.utils.sheet_to_json(sheet, { header: 1 });
      data = data.slice(1).map((row) => row.slice(1)); // ‡∏ï‡∏±‡∏î‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
      allData = allData.concat(data);
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ barcode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
    const insertPromises = allData.map(async (row) => {
      const barcode_id = '30000098' + Math.floor(Math.random() * 100000); // ‡∏™‡∏£‡πâ‡∏≤‡∏á barcode_id

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á barcode ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå barcode
      const canvas = createCanvas();
      JsBarcode(canvas, barcode_id, { format: 'CODE128', displayValue: true });
      const barcodeImgPath = path.join(__dirname, 'uploads', 'barcodes', `${barcode_id}.png`);
      const out = fs.createWriteStream(barcodeImgPath);
      const stream = canvas.createPNGStream();
      stream.pipe(out);

      return new Promise((resolve, reject) => {
        out.on('finish', () => {
          // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          const sql = `
            INSERT INTO laptop 
            (barcode_id, barcode_img, laptop_tag, brand, model, serial_number, status, cpu, gpu, ram, storage, display, os, insurance_date, warranty_expiry_date) 
            VALUES ?
          `;

          const valuesToInsert = [
            [
              barcode_id,
              barcodeImgPath,
              row[2], // laptop_tag
              row[1], // brand
              row[0], // model
              row[3], // serial_number
              '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', // status
              row[4], // cpu
              row[5], // gpu
              row[6], // ram
              row[7], // storage
              row[8], // display
              row[9], // os
              insurance_date, // ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å req.body
              warranty_expiry_date, // ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å req.body
            ],
          ];

          connection.query(sql, [valuesToInsert], (err, result) => {
            if (err) {
              console.error("Error inserting data:", err);
              reject(err);
            } else {
              console.log(`Inserted row for laptop_tag: ${row[2]}`);
              resolve(result);
            }
          });
        });

        out.on('error', (err) => {
          console.error("Error saving barcode image:", err);
          reject(err);
        });
      });
    });

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£ insert ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    await Promise.all(insertPromises);

    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£ insert ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    res.send(` ${insertPromises.length} `);

  } catch (error) {
    console.error("Error processing file:", error);
    res.status(500).send("Error processing file");
  }
});


// API: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô laptop status ‡πÄ‡∏õ‡πá‡∏ô '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
app.post('/deleteSelectedNotebooks', (req, res) => {
  const { laptop_tags } = req.body; // ‡∏£‡∏±‡∏ö array ‡∏Ç‡∏≠‡∏á laptop_tag

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ laptop_tags ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!Array.isArray(laptop_tags) || laptop_tags.length === 0) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ laptop_tags ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }

  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
  const deleteQuery = `UPDATE laptop SET status = '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' WHERE laptop_tag IN (?)`;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  connection.query(deleteQuery, [laptop_tags], (err, result) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    res.status(200).json({
      message: `‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å ${laptop_tags.length} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    });
  });
});



// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πâ‡∏Ñ
app.get('/notebooklist', (req, res) => {
  const query = 'SELECT brand, model FROM laptop'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° stu_id ‡πÉ‡∏ô SELECT
  connection.query(query, (err, results) => {
    if (err) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏ã‡πâ‡∏≥
    const uniqueResults = Array.from(new Set(results.map(item => item.model)))
      .map(model => results.find(item => item.model === model));
    res.json(results); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
  });
});


// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ detailNB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ SN 
app.get('/dataEditSN', (req, res) => {
  const { laptop_tag } = req.query;

  if (!laptop_tag) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ laptop_tag' });
  }

  const query = 'SELECT * FROM laptop WHERE laptop_tag = ?';

  connection.query(query, [laptop_tag], (err, results) => {
    if (err) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ' });
    }

    res.json(results[0]); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  });
});


// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏¥‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/allNotebook', (req, res) => {
  const query = `SELECT * FROM laptop
ORDER BY 
  CASE WHEN status = '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' THEN 1 ELSE 0 END, 
  laptop_tag ASC; `;

  connection.query(query, (err, results) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    res.json(results);
  });
});


// API: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ
app.put('/updateStatusAllNotebook', (req, res) => {
  const { laptop_tag, status } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ laptop_tag ‡πÅ‡∏•‡∏∞ status ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!laptop_tag || !status) {
    return res.status(400).json({ error: 'Missing laptop_tag or status' });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ status ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  const validStatuses = ['‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', '‡∏ã‡πà‡∏≠‡∏°','‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'];
  if (!validStatuses.includes(status)) {
    return res.status(400).json({ error: 'Invalid status value' });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ note
  const query = `
    UPDATE laptop 
    SET status = ?, note = NULL 
    WHERE laptop_tag = ?;
  `;

  connection.query(query, [status, laptop_tag], (err, result) => {
    if (err) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (result.affectedRows > 0) {
      res.json({ success: true, message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ note ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } else {
      res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
    }
  });
});


const nodemailer = require('nodemailer');


// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'
app.get('/ApproveRequest', (req, res) => {
  const query = `SELECT 
      b.borrow_id,
      b.request_date,
      b.borrow_date,
      b.status,
      b.document,  -- path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå PDF
      sd.stu_id,
      sd.stu_idcard,
      sd.stu_fname,
      sd.stu_lname,
      sd.stu_email, 
      f.faculty_name AS stu_faculty,
      f.faculty_engName AS stu_Engfaculty
  FROM 
      borrow b
  JOIN 
      studentdetail sd ON b.stu_id = sd.stu_id
  LEFT JOIN 
      faculty_subject fs ON sd.stu_faculty = fs.subjectId  -- ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å 's' ‡πÄ‡∏õ‡πá‡∏ô 'sd' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö studentdetail
  LEFT JOIN 
      faculty f ON fs.facultyId = f.id  -- ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å 's' ‡πÄ‡∏õ‡πá‡∏ô 'sd' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö studentdetail
  WHERE 
      b.status = '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'
  ORDER BY  
      b.borrow_id ASC;

      
    `;
  connection.query(query, (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Error fetching borrow requests' });
    }
    res.json(results);
  });
});


// API: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
app.post('/ApproveRequest/:borrow_id', (req, res) => {
  const { borrow_id } = req.params;
  const { action, note } = req.body; // action ‡∏Ñ‡∏∑‡∏≠ 'approve' ‡∏´‡∏£‡∏∑‡∏≠ 'reject', note ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

  // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const selectQuery = `
    SELECT 
        b.borrow_id,
        b.request_date,
        b.borrow_date,
        b.status,
        b.document, -- path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå PDF document
        sd.stu_id,
        sd.stu_fname,
        sd.stu_lname,
        sd.stu_email, -- ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        f.faculty_engName AS stu_faculty
    FROM 
        borrow b
    JOIN 
        studentdetail sd ON b.stu_id = sd.stu_id
    LEFT JOIN 
        faculty_subject fs ON sd.stu_faculty = fs.subjectId  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject
    LEFT JOIN 
        faculty f ON fs.facultyId = f.id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏ú‡πà‡∏≤‡∏ô facultyId
    WHERE 
        b.status = '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'  -- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
    ORDER BY  
        b.borrow_id ASC;

  `;

  connection.query(selectQuery, (err, results) => {
    if (err) {
      console.error("SQL Error:", err);
      return res.status(500).json({ error: 'Database query failed', details: err.message });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ borrow_id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å request ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const borrowRequest = results.find((r) => r.borrow_id === parseInt(borrow_id));
    if (!borrowRequest) {
      return res.status(404).json({ error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ borrow_id: ${borrow_id}` });
    }

    // 2. ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ action ‡πÅ‡∏•‡∏∞ note ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ñ‡∏∂‡∏á borrow_id ‡∏ô‡∏±‡πâ‡∏ô
    let status;
    if (action === 'approve') {
      status = '‡∏£‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á'; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    } else if (action === 'reject') {
      status = '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç'; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò

      // 4. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• document ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô NULL)
      const updateDocumentQuery = `UPDATE borrow SET document = NULL WHERE borrow_id = ?`;
      connection.query(updateDocumentQuery, [borrow_id], (err, updateDocResult) => {
        if (err) {
          console.error("Failed to remove document from database:", err);
          return res.status(500).json({ error: 'Failed to remove document from database', details: err.message });
        }
      });
    } else {
      return res.status(400).json({ error: 'Invalid action' });
    }

    // 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á (UPDATE) ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
    const updateQuery = `UPDATE borrow SET status = ? WHERE borrow_id = ?`;
    connection.query(updateQuery, [status, borrow_id], (err, updateResult) => {
      if (err) {
        console.error("SQL Error:", err);
        return res.status(500).json({ error: 'Failed to update borrow status', details: err.message });
      }

      // 6. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
      const student = borrowRequest;
      sendEmailToStudent(
        student.stu_email,
        student.stu_fname,
        student.stu_lname,
        status,
        note,
        student,
        res
      );
    });
  });
});


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
async function sendEmailToStudent(studentEmail, studentFname, studentLname, status, remarks, borrowData, res) {
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á transporter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ App Password
    const transporter = nodemailer.createTransport({
      host: 'smtp.gmail.com', // SMTP Server ‡∏Ç‡∏≠‡∏á Gmail
      port: 587, // ‡πÉ‡∏ä‡πâ port 587 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TLS
      secure: false, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ SSL
      auth: {
        user: 'kunita.n@kkumail.com', // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        pass: 'ummo nzyd bjch jjcp' // App Password ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Google
      },
      tls: {
        rejectUnauthorized: false // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
      }
    });

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    let subject = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô';
    let message = `‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì ${studentFname} ${studentLname}\n\n`;

    if (status === '‡∏£‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á') {
      message += `‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß\n\n`;
      message += `‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ ‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ (‡∏´‡∏≠‡∏™‡∏°‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á ‡∏ä‡∏±‡πâ‡∏ô 5 ) ‡∏¢‡∏∑‡∏°‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ 2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ\n`;
      message += `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ \n`
      message += `1. ‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ\n`
      message += `2. ‡∏ï‡∏¥‡∏î‡∏ò‡∏∏‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏•‡∏Å‡∏•‡∏±‡∏ö\n\n`;
      message += `** ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ **
      "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏°‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ"
      1. ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
      2. ‡∏û‡∏¢‡∏≤‡∏ô 1 ‡∏Ñ‡∏ô (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
      \t-‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏û‡∏¢‡∏≤‡∏ô‡∏°‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      \t-‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏≤‡∏¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏∂‡∏Å‡∏û‡∏¥‡∏°‡∏•‡∏Å‡πà‡∏≠‡∏ô)\n\n`;

      message += `**‡πÄ‡∏Ñ‡∏≤‡∏£‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏à-‡∏® ‡πÄ‡∏ß‡∏•‡∏≤ 09.00-12: ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ß‡∏•‡∏≤ 13:00-16:00 ‡∏ô. ‡∏õ‡∏¥‡∏î ‡∏™-‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå **\n\n`;
      
      message += `** ‡∏û‡∏µ‡πà‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå 062-1954643 **\n`;
      message += `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á : Technical Support, Addmin notebooks, Counter for borrow and return notebooks.\n`;
      message += `Librarian of The Academic Resources, Khon Kean University\n`;
      message += `Khon Kean, Thailand\n`;
      message += `123 ‡∏ñ.‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û ‡∏ï.‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô 40002\n`;
      message += `‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 043-009700 ‡∏ï‡πà‡∏≠ 42001‡∏°46123-4\n`;
      message += `‡∏ó‡∏£‡∏™‡∏≤‡∏£ 043-202541-50839\n\n`;

      message += `//////////////////////////////////////////////////////////////////////////\n\n`;

      message += `Your request has been approved.\n\n`;

      message += `Students can come to the notebook borrowing and return service point (5th floor of the Central Library) to receive a regular 2-month loan within 7 days from now.\n`;

      message += `Note\n`;
      message += `1. Come to receive it within the specified time. If it is a holiday or public holiday, postpone it to the next business day.\n`;
      message += `2. If you are busy or have received the device, please notify us by email.\n\n`;
      
      message += `** Within the specified time only. **
      "Documents used for borrowing notebooks"
      1. Student ID card (real student card only)
      2. 1 witness (with original student ID only)\n\n`;
      
      message += `**Counter Mon-Fri time 09.00-12:00 and time 13:00-16:00 Closed Sat. - Sun. and public holidays.\n\n`;

      message += `** ‡∏û‡∏µ‡πà‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå Tel. 062-1954643 **\n`;
      message += `position : Technical Support, Addmin notebooks, Service counter for borrowing-returning laptop.\n`;
      message += `Librarian of The Academic Resources, Khon Kean University\n`;
      message += `Khon Kean, Thailand\n`;
      message += `Tel.043-202541-50839\n`;
      
      } 
      
      else if (status === '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç') {
        message += `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ \n\n`;
        message += `‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å ${remarks}\n\n`;
        message += `‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà\n\n`;

        message += `**‡πÄ‡∏Ñ‡∏≤‡∏£‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏à-‡∏® ‡πÄ‡∏ß‡∏•‡∏≤ 09.00-12: ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ß‡∏•‡∏≤ 13:00-16:00 ‡∏ô. ‡∏õ‡∏¥‡∏î ‡∏™-‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå **\n\n`;
      
        message += `** ‡∏û‡∏µ‡πà‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå 062-1954643 **\n`;
        message += `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á : Technical Support, Addmin notebooks, Counter for borrow and return notebooks.\n`;
        message += `Librarian of The Academic Resources, Khon Kean University\n`;
        message += `Khon Kean, Thailand\n`;
        message += `123 ‡∏ñ.‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û ‡∏ï.‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô 40002\n`;
        message += `‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 043-009700 ‡∏ï‡πà‡∏≠ 42001‡∏°46123-4\n`;
        message += `‡πÇ‡∏ó‡∏£‡∏™‡∏≤‡∏£ 043-202541-50839\n\n`;

        message += `//////////////////////////////////////////////////////////////////////////\n\n`;

        message += `Your request was not approved.\n\n`;

        message += `Because of that ${remarks}\n\n`;

        message += `If you have any questions, please contact the admin.\n`;

        message += `**Counter Mon-Fri time 09.00-12:00 and time 13:00-16:00 Closed Sat. - Sun. and public holidays.\n\n`;

      message += `** ‡∏û‡∏µ‡πà‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå Tel. 062-1954643 **\n`;
      message += `position : Technical Support, Addmin notebooks, Service counter for borrowing-returning laptop.\n`;
      message += `Librarian of The Academic Resources, Khon Kean University\n`;
      message += `Khon Kean, Thailand\n`;
      message += `Tel.043-202541-50839\n`;
      
    }


    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const mailOptions = {
      from: 'kunita.n@kkumail.com', // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      to: studentEmail, // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
      subject: subject,
      text: message
    };

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    await transporter.sendMail(mailOptions);

    console.log('‚úÖ Email sent successfully to:', studentEmail);
    if (!res.headersSent) {
      res.json({
        message: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
        borrowData: {
          borrow_id: borrowData.borrow_id,
          status: status,
          note: remarks,
        }
      });
    }
  } catch (error) {
    console.error('‚ùå Error sending email:', error);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Error sending email', details: error.message });
    }
  }
}




// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô 
app.get('/ApproveRequestDT', (req, res) => {
  const borrow_id = req.query.borrow_id; // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ req.params.borrow_id ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô URL params

  if (!borrow_id) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ borrow_id' });
  }

  const query = `
    SELECT 
      b.borrow_id, 
      b.renew_date, 
      b.borrow_date, 
      b.return_date, 
      b.document AS document,
      b.witness, 
      b.laptop_tag, 
      b.status,
      borrower.stu_fname AS borrower_fname, 
      borrower.stu_lname AS borrower_lname, 
      borrower.stu_id AS borrower_id,
      borrower.stu_idcard AS borrower_idcard,
      borrower.stu_faculty AS borrower_faculty,
      borrower.stu_email AS borrower_email,
      borrower.college_years AS borrower_collegeyears, 
      faculty_borrower.faculty_name AS borrower_facultyname,
      faculty_borrower.faculty_engName AS borrower_facultyEngName,
      borrower.stu_email AS borrower_email, 
      borrower.stu_phone AS borrower_phone,
      witness.stu_fname AS witness_fname, 
      witness.stu_lname AS witness_lname, 
      witness.stu_id AS witness_id,
      witness.stu_idcard AS witness_idcard,
      witness.stu_faculty AS witness_faculty,
      witness.stu_email AS witness_email,
      witness.college_years AS witness_collegeyears,
      faculty_witness.faculty_name AS witness_facultyname, 
      witness.stu_email AS witness_email, 
      witness.stu_phone AS witness_phone,
      laptop.brand AS laptop_brand,
      laptop.model AS laptop_model,
      laptop.serial_number AS laptop_serial_number,
      laptop.cpu AS laptop_cpu,
      laptop.ram AS laptop_ram,
      laptop.storage AS laptop_storage,
      laptop.storage_type AS laptop_storage_type,
      laptop.display AS laptop_display,
      laptop.gpu AS laptop_gpu,
      laptop.os AS laptop_os,
      laptop.barcode_id
    FROM 
    borrow b
    JOIN 
        studentdetail borrower ON b.stu_id = borrower.stu_id
    LEFT JOIN 
        studentdetail witness ON b.witness = witness.stu_id
    LEFT JOIN 
        faculty_subject fs_borrower ON borrower.stu_faculty = fs_borrower.subjectId  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject ‡∏Ç‡∏≠‡∏á borrower
    LEFT JOIN 
        faculty faculty_borrower ON fs_borrower.facultyId = faculty_borrower.id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏Ç‡∏≠‡∏á borrower
    LEFT JOIN 
        faculty_subject fs_witness ON witness.stu_faculty = fs_witness.subjectId  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject ‡∏Ç‡∏≠‡∏á witness
    LEFT JOIN 
        faculty faculty_witness ON fs_witness.facultyId = faculty_witness.id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏Ç‡∏≠‡∏á witness
    LEFT JOIN 
        laptop ON b.laptop_tag = laptop.laptop_tag
    WHERE 
        b.borrow_id = ?; -- ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ b.borrow_id 
  `;

  connection.query(query, [borrow_id], (err, result) => {
    if (err) {
      console.error('Database error:', err); // Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡∏Å
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (result.length > 0) {
      res.json(result[0]); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
    } else {
      res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°' });
    }
  });
});


// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á'
app.get('/waiting', (req, res) => {
  const query = `SELECT 
    b.borrow_id,
    b.request_date,
    b.borrow_date,
    b.status,
    b.document,
    sd.stu_id,
    sd.stu_fname,
    sd.stu_lname,
    sd.stu_email,
    sd.stu_idcard,
    f.faculty_name AS stu_faculty,
    f.faculty_engName AS stu_Engfaculty,
    laptop.laptop_tag
  FROM 
    borrow b
  JOIN 
    studentdetail sd ON b.stu_id = sd.stu_id
  LEFT JOIN 
      faculty_subject fs ON sd.stu_faculty = fs.subjectId
  LEFT JOIN 
      faculty f ON fs.facultyId  = f.id
  LEFT JOIN 
    laptop ON b.laptop_tag = laptop.laptop_tag
  WHERE 
    b.status = '‡∏£‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á'
  ORDER BY  b.borrow_id ASC;
  `;
  connection.query(query, (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Error fetching borrow requests' });
    }
    res.json(results);
  });
});



// API: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° 'laptop_tag'
app.patch('/waitingDT', (req, res) => {
  const borrowId = req.query.borrowId; // ‡∏î‡∏∂‡∏á borrowId ‡∏à‡∏≤‡∏Å query string
  const { status, laptop_tag, officer_email } = req.body; // ‡∏î‡∏∂‡∏á status ‡πÅ‡∏•‡∏∞ laptop_tag ‡∏à‡∏≤‡∏Å body
 
  //console.log('Received data:', req.body);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ borrowId, laptop_tag ‡πÅ‡∏•‡∏∞ officer_email ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!borrowId) {
    return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ borrowId" });
  }

  if (!laptop_tag || laptop_tag.trim() === '') {
    return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ laptop_tag" });
  }

  if (!officer_email) {
    return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ officer_email" });
  }

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ officer_id ‡∏à‡∏≤‡∏Å officer_email
  const getOfficerIdQuery = `SELECT officer_id FROM officer WHERE officer_email = ?`;
  connection.query(getOfficerIdQuery, [officer_email], (err, result) => {
    if (err) {
      console.error("Error fetching officer_id:", err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ officer_id' });
    }

    if (result.length === 0) {
      return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö officer_email ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    const officerId = result[0].officer_id;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö laptop_tag ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const checkLaptopTagQuery = `SELECT laptop_tag, status FROM laptop WHERE laptop_tag = ?`;
    connection.query(checkLaptopTagQuery, [laptop_tag], (err, result) => {
      if (err) {
        console.error("Error checking laptop tag:", err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö laptop_tag' });
      }

      if (result.length === 0) {
        return res.status(400).json({ error: "laptop_tag ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
      }

      const currentLaptopStatus = result[0].status;
      if (currentLaptopStatus !== '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ') {
        console.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: Laptop [${laptop_tag}] ‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '${currentLaptopStatus}'`);
        return res.status(400).json({
          error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ‡∏Ñ‡∏∑‡∏≠ '${currentLaptopStatus}' ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ'`
        });
      }

      // ‡∏î‡∏∂‡∏á return_date ‡∏à‡∏≤‡∏Å control_request
      const getControlRequestQuery = `SELECT end,control_id FROM control_request ORDER BY control_id DESC LIMIT 1`;
      connection.query(getControlRequestQuery, (err, result) => {
        if (err) {
          console.error("Error fetching control_request end:", err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• control_request' });
        }

        if (result.length === 0) {
          return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô control_request' });
        }

        const returnDate = result[0].end;
        //const borrowDate = new Date().toISOString().split('T')[0];
        const controlId = result[0].control_id;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• borrow ‡∏£‡∏ß‡∏° officer_borrow
        const updateQuery = `
          UPDATE borrow
          SET status = '‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', laptop_tag = ?, return_date = ?, borrow_date = NOW(), officer_borrow = ?, control_id = ?
          WHERE borrow_id = ?
        `;
        const queryParams = [laptop_tag, returnDate, officerId, controlId, borrowId];

        connection.query(updateQuery, queryParams, (err, result) => {
          if (err) {
            console.error("Error executing update query:", err);
            return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°' });
          }

          if (result.affectedRows === 0) {
            return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö borrow_id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
          }

          const updateLaptopQuery = `UPDATE laptop SET status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' WHERE laptop_tag = ?`;
          connection.query(updateLaptopQuery, [laptop_tag], (err, result) => {
            if (err) {
              console.error("Error updating laptop status:", err);
              return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ' });
            }

            if (result.affectedRows === 0) {
              return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
            }

            const getStuIdQuery = `SELECT stu_id FROM borrow WHERE borrow_id = ?`;
            connection.query(getStuIdQuery, [borrowId], (err, result) => {
              if (err) {
                console.error("Error fetching stu_id:", err);
                return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á stu_id' });
              }

              if (result.length === 0) {
                return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö borrow_id ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
              }

              const stuId = result[0].stu_id;

              // ‡∏î‡∏∂‡∏á stu_faculty ‡∏à‡∏≤‡∏Å studentdetail
              const getFacultyQuery = `
              SELECT 
                  f.id AS faculty_id,  -- ‡πÄ‡∏û‡∏¥‡πà‡∏° f.id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                  f.faculty_name AS stu_faculty_name
              FROM 
                  studentdetail s
              LEFT JOIN 
                  faculty_subject fs ON s.stu_faculty = fs.subjectId
              LEFT JOIN 
                  faculty f ON fs.facultyId = f.id
              WHERE 
                  s.stu_id = ?;

              `;
              connection.query(getFacultyQuery, [stuId], (err, result) => {
                if (err) {
                  console.error("Error fetching stu_faculty:", err);
                  return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á stu_faculty' });
                }

                if (result.length === 0) {
                  return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö stu_id ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö studentdetail" });
                }

                const facultyId = result[0].faculty_id;

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Amount_borrowed ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á faculty
                const updateFacultyQuery = `UPDATE faculty SET Amount_borrowed = Amount_borrowed + 1 WHERE id = ?`;
                connection.query(updateFacultyQuery, [facultyId], (err, result) => {
                  if (err) {
                    console.error("Error updating faculty Amount_borrowed:", err);
                    return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Amount_borrowed ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞' });
                  }

                  if (result.affectedRows === 0) {
                    return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö faculty_id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
                  }

                  const selectQuery = `
                      SELECT 
                        b.borrow_id, 
                        b.return_date, 
                        b.laptop_tag, 
                        b.status, 
                        b.borrow_date,
                        borrower.stu_fname AS borrower_fname, 
                        borrower.stu_lname AS borrower_lname,
                        borrower.stu_id AS borrower_id, 
                        borrower.stu_faculty AS borrower_faculty,
                        borrower.stu_email AS borrower_email, 
                        borrower.stu_phone AS borrower_phone,
                        witness.stu_fname AS witness_fname, 
                        witness.stu_lname AS witness_lname,
                        witness.stu_id AS witness_id, 
                        witness.stu_faculty AS witness_faculty,
                        witness.stu_email AS witness_email, 
                        witness.stu_phone AS witness_phone,
                        laptop.status AS laptop_status,
                        f.faculty_name AS borrower_faculty_name,  -- ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
                        f.faculty_engName AS borrower_faculty_engname,  -- ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ì‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
                        wf.faculty_name AS witness_faculty_name,  -- ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ô
                        wf.faculty_engName AS witness_faculty_engname  -- ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ì‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ô
                    FROM 
                        borrow b
                    JOIN 
                        studentdetail borrower ON b.stu_id = borrower.stu_id
                    LEFT JOIN 
                        studentdetail witness ON b.witness = witness.stu_id
                    LEFT JOIN 
                        laptop ON b.laptop_tag = laptop.laptop_tag
                    LEFT JOIN 
                        faculty_subject fs ON borrower.stu_faculty = fs.subjectId  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
                    LEFT JOIN 
                        faculty f ON fs.facultyId = f.id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
                    LEFT JOIN 
                        faculty_subject fs_witness ON witness.stu_faculty = fs_witness.subjectId  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏ô
                    LEFT JOIN 
                        faculty wf ON fs_witness.facultyId = wf.id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏ô
                    WHERE 
                        b.borrow_id = ?;

                    `;
                  connection.query(selectQuery, [borrowId], (err, result) => {
                    if (err) {
                      console.error("Error fetching updated data:", err);
                      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
                    }

                    if (result.length > 0) {
                      return res.json(result[0]);
                    } else {
                      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°' });
                    }
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});


// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå laptop_tag ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
app.patch('/laptop', (req, res) => {
  const { laptop_tag } = req.body;

  if (!laptop_tag) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ laptop_tag' });
  }

  const checkQuery = `
      SELECT * FROM laptop WHERE laptop_tag = ?
  `;

  connection.query(checkQuery, [laptop_tag], (err, results) => {
    if (err) {
      console.error('Error fetching laptop data:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• laptop' });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö laptop_tag ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });
    }

    res.json(results[0]); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• laptop ‡∏ó‡∏µ‡πà‡∏û‡∏ö
  });
});



// API: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏° 'renew', 'return'
app.post('/borrowDT', (req, res) => {
  const { borrow_id, action, laptop_status, note, officer_email } = req.body;

  // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ borrow_id ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
  if (!borrow_id) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ borrow_id' });
  }
  if (!action) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ action' });
  }
  if (!officer_email) {
    return res.status(400).json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ officer_email' });
  }

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• officer_id ‡∏à‡∏≤‡∏Å officer_email
  const getOfficerIdQuery = `SELECT officer_id FROM officer WHERE officer_email = ?`;
  connection.query(getOfficerIdQuery, [officer_email], (err, result) => {
    if (err) {
      console.error("Error fetching officer_id:", err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ officer_id' });
    }

    if (result.length === 0) {
      return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö officer_email ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    const officerId = result[0].officer_id;

    if (action === 'return') {
      if (!laptop_status) {
        return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á' });
      }

      const updateBorrowQuery = `
        UPDATE borrow 
        SET status = '‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', return_date = NOW(), officer_return = ?
        WHERE borrow_id = ?;
      `;

      const updateLaptopQuery = `
        UPDATE laptop 
        SET status = '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', note = ?
        WHERE laptop_tag = (SELECT laptop_tag FROM borrow WHERE borrow_id = ?);
      `;

      const checkLaptopStatusQuery = `
        SELECT l.status AS laptop_status, s.stu_faculty
        FROM borrow b
        JOIN laptop l ON b.laptop_tag = l.laptop_tag
        JOIN studentdetail s ON b.stu_id = s.stu_id
        WHERE b.borrow_id = ?;
      `;

      const updateFacultyQuery = `
        UPDATE faculty 
        SET Amount_borrowed = GREATEST(Amount_borrowed - 1, 0) 
        WHERE id = (
            SELECT fs.facultyId 
            FROM faculty_subject fs
            WHERE fs.subjectId = ?
            LIMIT 1
    );
      `;

      const getFacultyIdQuery = `
        SELECT f.id AS faculty_id
        FROM studentdetail sd
        LEFT JOIN faculty_subject fs ON sd.stu_faculty = fs.subjectId
        LEFT JOIN faculty f ON fs.facultyId = f.id
        WHERE sd.stu_id = ?;
      `;

      connection.beginTransaction((err) => {
        if (err) {
          console.error('Transaction error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°' });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ laptop ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stu_faculty
        connection.query(checkLaptopStatusQuery, [borrow_id], (err, result) => {
          if (err) {
            return connection.rollback(() => {
              console.error('Database error:', err);
              return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ' });
            });
          }

          if (result.length === 0) {
            return connection.rollback(() => {
              return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö borrow_id ‡∏ô‡∏µ‡πâ' });
            });
          }

          const { laptop_status: currentLaptopStatus, stu_faculty } = result[0];

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï borrow
          connection.query(updateBorrowQuery, [officerId, borrow_id], (err, result) => {
            if (err) {
              return connection.rollback(() => {
                console.error('Database error:', err);
                return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á' });
              });
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà 
            connection.query(updateLaptopQuery, [ note || null, borrow_id], (err, result) => {
              if (err) {
                return connection.rollback(() => {
                  console.error('Database error:', err);
                  return res.status(500).json({
                    status: 'error',
                    message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á'
                  });
                });
              }

              // ‡∏•‡∏î Amount_borrowed ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞
              connection.query(updateFacultyQuery, [stu_faculty], (err, result) => {
                if (err) {
                  return connection.rollback(() => {
                    console.error('Database error:', err);
                    return res.status(500).json({
                      status: 'error',
                      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞'
                    });
                  });
                }
              });

              // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
              connection.commit((err) => {
                if (err) {
                  return connection.rollback(() => {
                    console.error('Transaction commit error:', err);
                    return res.status(500).json({
                      status: 'error',
                      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'
                    });
                  });
                }

                return res.json({
                  status: 'success', // ‡πÄ‡∏û‡∏¥‡πà‡∏° status success
                  message: '‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à !'
                });
              });
            });
          });
        });
      });
    } else if (action === 'renew') {
      // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ end ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å control_request ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ borrow.control_id
      const getEndDateQuery = `
        SELECT end 
        FROM control_request
        WHERE control_id = (SELECT control_id FROM borrow WHERE borrow_id = ?)
        ORDER BY control_id DESC
        LIMIT 1;
      `;

      connection.query(getEndDateQuery, [borrow_id], (err, result) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å control_request' });
        }

        if (result.length === 0) {
          return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô control_request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö borrow_id ‡∏ô‡∏µ‡πâ' });
        }

        const endDate = result[0].end;  // ‡∏Ñ‡πà‡∏≤ end ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å control_request
        // const renewDate = new Date();   // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ renew
        // const borrowDate = new Date().toISOString();

        // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á borrow
        const updateRenewQuery = `
          UPDATE borrow 
          SET status = '‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', borrow_date = NOW(), renew_date = NOW(), return_date = ?, officer_return = ?
          WHERE borrow_id = ?;
        `;

        connection.query(updateRenewQuery, [endDate, officerId, borrow_id], (err, result) => {
          if (err) {
            console.error('Database error:', err);
            return res.status(500).json({
              status: 'error', // ‡πÄ‡∏û‡∏¥‡πà‡∏° status error
              message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°'
            });
          }

          return res.json({
            status: 'success', // ‡πÄ‡∏û‡∏¥‡πà‡∏° status success
            message: '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
          });
        });
      });
    } else if (action === 'repair') {
      const updateRepairQuery = `
        UPDATE laptop 
        SET status = '‡∏ã‡πà‡∏≠‡∏°', note = ?
        WHERE laptop_tag = (SELECT laptop_tag FROM borrow WHERE borrow_id = ?);
      `;

      connection.query(updateRepairQuery, [note || null, borrow_id], (err) => {
        if (err) return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ã‡πà‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á' });

        return res.json({ status: 'success', message: '‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
      });

    // 6. ‡∏Å‡∏£‡∏ì‡∏µ action ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    } else {
      return res.status(400).json({ error: 'action ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô return, renew ‡∏´‡∏£‡∏∑‡∏≠ repair ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' });
    }
  });
});


// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
app.get('/return', (req, res) => {
  const query = `SELECT 
      b.borrow_id,
      b.request_date,
      b.borrow_date,
      b.return_date,
      b.status,
      b.document,  -- path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå PDF
      sd.stu_id,
      sd.stu_idcard,
      sd.stu_fname,
      sd.stu_lname,
      sd.stu_email, -- ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
      f.faculty_name AS stu_faculty,
      f.faculty_engName AS stu_Engfaculty,
      laptop.laptop_tag
    FROM 
      borrow b
    JOIN 
      studentdetail sd ON b.stu_id = sd.stu_id
    LEFT JOIN 
        faculty_subject fs ON sd.stu_faculty = fs.subjectId  
    LEFT JOIN 
        faculty f ON fs.facultyId = f.id 
    LEFT JOIN 
      laptop ON b.laptop_tag = laptop.laptop_tag
    WHERE 
      b.status = '‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    ORDER BY  b.borrow_id ASC;
    `;
  connection.query(query, (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Error fetching borrow requests' });
    }
    res.json(results);
  });
});


// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß
app.get('/returnDT', (req, res) => {
  const borrow_id = req.query.borrow_id;
  if (!borrow_id) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ borrow_id' });
  }

  const query = `
    SELECT 
      b.borrow_id, 
      b.renew_date, 
      b.request_date,
      b.borrow_date, 
      b.return_date, 
      b.document AS document,
      b.witness, 
      b.laptop_tag, 
      b.status,
      borrower.stu_fname AS borrower_fname, 
      borrower.stu_lname AS borrower_lname, 
      borrower.stu_id AS borrower_id,
      borrower.stu_idcard AS borrower_idcard,
      borrower.stu_email AS borrower_email,
      borrower.stu_faculty AS borrower_faculty, 
      borrower.college_years AS borrower_collegeyears,
      faculty_borrower.faculty_name AS borrower_facultyname,
      borrower.stu_email AS borrower_email, 
      borrower.stu_phone AS borrower_phone,
      witness.stu_fname AS witness_fname, 
      witness.stu_lname AS witness_lname, 
      witness.stu_id AS witness_id,
      witness.stu_idcard AS witness_idcard,
      witness.stu_faculty AS witness_faculty,
      witness.college_years AS witness_collegeyears,
      faculty_witness.faculty_name AS witness_facultyname, 
      witness.stu_email AS witness_email, 
      witness.stu_phone AS witness_phone,
      laptop.barcode_id AS barcode_id,
      laptop.brand AS laptop_brand,
      laptop.model AS laptop_model,
      laptop.serial_number AS laptop_serial_number,
      laptop.cpu AS laptop_cpu,
      laptop.ram AS laptop_ram,
      laptop.storage AS laptop_storage,
      laptop.storage_type AS laptop_storage_type,
      laptop.display AS laptop_display,
      laptop.gpu AS laptop_gpu,
      laptop.os AS laptop_os
    FROM borrow b
    JOIN studentdetail borrower ON b.stu_id = borrower.stu_id
    LEFT JOIN studentdetail witness ON b.witness = witness.stu_id
    LEFT JOIN faculty faculty_borrower ON borrower.stu_faculty = faculty_borrower.id
    LEFT JOIN faculty faculty_witness ON witness.stu_faculty = faculty_witness.id
    LEFT JOIN laptop ON b.laptop_tag = laptop.laptop_tag
    WHERE b.borrow_id = ?; -- ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ b.borrow_id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö borrow_id ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
  `;

  connection.query(query, [borrow_id], (err, result) => {
    if (err) {
      console.error('Database error:', err); // Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡∏Å
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (result.length > 0) {
      res.json(result[0]); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
    } else {
      res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°' });
    }
  });

});





// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
app.get('/officers', (req, res) => {
  const query = 'SELECT * FROM officer';
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching officers:', err);
      res.status(500).send('Error fetching officers');
      return;
    }
    res.json(results);
  });
});

// API: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
app.post('/insertOfficer', (req, res) => {
  const { officer_fname, officer_lname, officer_email, password, phone, job_position } = req.body;

  if (!officer_fname || !officer_lname || !officer_email || !password || !phone || !job_position) {
    res.status(400).send('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    return;
  }

  const query = 'INSERT INTO officer (officer_fname, officer_lname, officer_email, password, phone, job_position) VALUES (?, ?, ?, ?, ?, ?)';
  connection.query(query, [officer_fname, officer_lname, officer_email, password, phone, job_position], (err, results) => {
    if (err) {
      console.error('Error inserting officer:', err);
      res.status(500).send('‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡πÄ‡∏•‡πâ‡∏ß');
      return;
    }
    res.status(201).send('Officer added successfully');
  });
});

// API: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
app.delete('/deleteOfficer', (req, res) => {
  const { officer_id } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ officer_id ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!officer_id) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ officer_id' });
  }

  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ officer_id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
  const deleteQuery = 'DELETE FROM officer WHERE officer_id = ?';

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  connection.query(deleteQuery, [officer_id], (err, result) => {
    if (err) {
      console.error('Error deleting officer:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ officer_id ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    res.status(200).json({
      message: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    });
  });
});



// API : ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà admin ‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥
app.get('/manageByAdmin', (req, res) => {
  const query = `
    SELECT 
      b.borrow_id,
      b.request_date,
      b.borrow_date,
      b.status AS borrow_status,
      b.document,
      b.officer_borrow,
      b.officer_return,
      b.laptop_tag,
      sd.stu_id,
      sd.stu_idcard,
      sd.stu_fname,
      sd.stu_lname,
      sd.stu_email,
      sd.college_years,
      f.id,
      f.faculty_engName,
      l.status AS laptop_status,  -- ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå status ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á laptop ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô laptop_status
      COALESCE(ob.officer_fname, '') AS officer_borrow_fname,
      COALESCE(ob.officer_lname, '') AS officer_borrow_lname,
      COALESCE(orr.officer_fname, '') AS officer_return_fname,
      COALESCE(orr.officer_lname, '') AS officer_return_lname
    FROM 
      borrow b
    JOIN 
      studentdetail sd ON b.stu_id = sd.stu_id
    LEFT JOIN 
        faculty_subject fs ON sd.stu_faculty = fs.subjectId  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty_subject ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
    LEFT JOIN 
        faculty f ON fs.facultyId = f.id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö faculty ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
    JOIN 
      laptop l ON b.laptop_tag = l.laptop_tag  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á borrow ‡πÅ‡∏•‡∏∞ laptop ‡∏î‡πâ‡∏ß‡∏¢ laptop_tag
    LEFT JOIN
      officer ob ON b.officer_borrow = ob.officer_id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á officer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö officer_borrow
    LEFT JOIN
      officer orr ON b.officer_return = orr.officer_id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á officer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö officer_return
    ORDER BY  
      b.borrow_id ASC;
  `;
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching borrow records:', err);
      res.status(500).send('Error fetching borrow records');
      return;
    }
    res.json(results);
  });
});


app.get('/checkBorrowStatus', async (req, res) => {
  const today = moment().startOf('day').format('YYYY-MM-DD');  // ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤

  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• borrow ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    const checkBorrowQuery = `SELECT borrow_id, control_id FROM borrow WHERE status = '‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'`;
    const borrowRecords = await new Promise((resolve, reject) => {
      connection.query(checkBorrowQuery, (err, borrowRecords) => {
        if (err) reject(err);
        resolve(borrowRecords);
      });
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (borrowRecords.length > 0) {
      // ‡πÉ‡∏ä‡πâ for...of loop ‡πÅ‡∏•‡∏∞ async/await ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      for (const borrow of borrowRecords) {
        const controlId = borrow.control_id;
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• control ‡∏à‡∏≤‡∏Å control_request
        const getControlQuery = `SELECT end FROM control_request WHERE control_id = ? ORDER BY control_id LIMIT 1`;
        const controlResult = await new Promise((resolve, reject) => {
          connection.query(getControlQuery, [controlId], (err, result) => {
            if (err) reject(err);
            resolve(result);
          });
        });

        if (controlResult.length === 0) {
          console.log(`No control data found for control_id: ${controlId}`);
          continue;
        }

        const end = controlResult[0].end;
        
        // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å)
        if (today > moment(end).format('YYYY-MM-DD')) {
          const updateStatusQuery = `UPDATE borrow SET status = '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' WHERE borrow_id = ?`;
          await new Promise((resolve, reject) => {
            connection.query(updateStatusQuery, [borrow.borrow_id], (err) => {
              if (err) reject(err);
              resolve();
            });
          });
        }
      }
    }

    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    const getUpdatedRecordsQuery = `
      SELECT b.borrow_id, b.status, b.request_date, b.borrow_date, b.return_date, sd.stu_id, sd.stu_idcard, sd.stu_fname, sd.stu_lname, sd.stu_email, f.faculty_name AS stu_faculty, f.faculty_engName AS stu_Engfaculty, laptop.laptop_tag
      FROM borrow b
      JOIN studentdetail sd ON b.stu_id = sd.stu_id
      LEFT JOIN faculty_subject fs ON sd.stu_faculty = fs.subjectId
      LEFT JOIN faculty f ON fs.facultyId = f.id
      LEFT JOIN laptop ON b.laptop_tag = laptop.laptop_tag
      WHERE b.status = '‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
    `;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const results = await new Promise((resolve, reject) => {
      connection.query(getUpdatedRecordsQuery, (err, results) => {
        if (err) reject(err);
        resolve(results);
      });
    });

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô
    res.json(results);

  } catch (err) {
    console.error('Error during process:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});


// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
app.get('/statusReLate', (req, res) => {
  const query = `
  SELECT 
  b.borrow_id, 
  b.status, 
  b.request_date, 
  b.borrow_date, 
  b.return_date, 
  sd.stu_id, 
  sd.stu_idcard, 
  sd.stu_fname, 
  sd.stu_lname, 
  sd.stu_email,
  sd.stu_phone, 
  fs.subName,
  f.faculty_name AS stu_faculty, 
  f.faculty_engName AS stu_Engfaculty, 
  laptop.laptop_tag,
  laptop.barcode_id,
  COALESCE(ob.officer_fname, '') AS officer_borrow_fname,
  COALESCE(ob.officer_lname, '') AS officer_borrow_lname,
  COALESCE(orr.officer_fname, '') AS officer_return_fname,
  COALESCE(orr.officer_lname, '') AS officer_return_lname
FROM borrow b 
JOIN studentdetail sd ON b.stu_id = sd.stu_id
LEFT JOIN faculty_subject fs ON sd.stu_faculty = fs.subjectId
LEFT JOIN faculty f ON fs.facultyId = f.id
LEFT JOIN laptop ON b.laptop_tag = laptop.laptop_tag
LEFT JOIN officer ob ON b.officer_borrow = ob.officer_id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á officer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö officer_borrow
LEFT JOIN officer orr ON b.officer_return = orr.officer_id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á officer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö officer_return
WHERE b.status = '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö';  

  `;
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching faculties:', err);
      res.status(500).send('Error fetching faculties');
      return;
    }
    res.json(results);
  });
});



// API : ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á faculty ‡πÉ‡∏ô ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ -> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
app.get('/faculties', (req, res) => {
  const query = 'SELECT * FROM faculty';
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching faculties:', err);
      res.status(500).send('Error fetching faculties');
      return;
    }
    res.json(results);
  });
});


//API: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô quota ‡πÉ‡∏ô ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ -> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
app.post('/insertfacultiesQuota', (req, res) => {
  const { faculty_engName, faculty_name, number } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
  if (!faculty_engName || !faculty_name || typeof number === 'undefined') {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ faculty_engName, faculty_name, ‡πÅ‡∏•‡∏∞ number' });
  }

  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á laptop
  const checkLaptopQuery = `
    SELECT COUNT(*) AS total FROM laptop WHERE status != '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
  `;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á laptop ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
  connection.query(checkLaptopQuery, (err, result) => {
    if (err) {
      console.error('Error checking laptop data:', err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á laptop' });
    }

    const totalLaptopAvailable = result[0].total || 0;

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå number ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á faculty
    const checkFacultyQuery = `
      SELECT SUM(number) AS totalFaculty FROM faculty;
    `;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå number ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á faculty
    connection.query(checkFacultyQuery, (err, result) => {
      if (err) {
        console.error('Error checking faculty data:', err);
        return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á faculty' });
      }

      const totalFaculty = result[0].totalFaculty || 0;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      const remainingCapacity = totalLaptopAvailable - totalFaculty;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (remainingCapacity < number) {
        return res.status(400).json({
          error: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${remainingCapacity}`
        });
      }

      // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const insertQuery = `
        INSERT INTO faculty (faculty_engName, faculty_name, number)
        VALUES (?, ?, ?);
      `;
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      connection.query(insertQuery, [faculty_engName, faculty_name, number], (err, result) => {
        if (err) {
          console.error('Error inserting data into faculty:', err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }

        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        res.status(201).json({
          message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          data: {
            faculty_engName,
            faculty_name,
            number,
          }
        });
      });
    });
  });
});



// API: ‡∏•‡∏ö quota ‡πÉ‡∏ô ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ -> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
app.delete('/deleteQuota', (req, res) => {
  const { id } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ id ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!id) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ id' });
  }

  // SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ï‡∏≤‡∏° id
  const selectQuery = 'SELECT faculty_name FROM faculty WHERE id = ?';
  // SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ï‡∏≤‡∏° id
  const deleteQuery = 'DELETE FROM faculty WHERE id = ?';

  // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  connection.query(selectQuery, [id], (selectErr, selectResult) => {
    if (selectErr) {
      console.error('Error retrieving quota name:', selectErr);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (selectResult.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    const quotaName = selectResult[0].faculty_name;

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // connection.query(deleteQuery, [id], (deleteErr, deleteResult) => {
    //   if (deleteErr) {
    //     console.error('Error deleting quota:', deleteErr);
    //     return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤' });
    //   }

    //   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    //   if (deleteResult.affectedRows === 0) {
    //     return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    //   }

    //   // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    //   res.status(200).json({
    //     message: `‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ "${quotaName}" ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    //   });
    // });

    // ------- ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÉ‡∏´‡∏°‡πà -------
    connection.query(deleteQuery, [id], (deleteErr, deleteResult) => {
      if (deleteErr) {
        console.error('Error deleting quota:', deleteErr);
        return res.status(500).json({
          status: 'error', // ‡πÄ‡∏û‡∏¥‡πà‡∏° status ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤',
          error: deleteErr.message // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error ‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô (‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á security ‡πÉ‡∏ô production)
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (deleteResult.affectedRows === 0) {
        return res.status(404).json({
          status: 'not_found', // ‡πÄ‡∏û‡∏¥‡πà‡∏° status
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
        });
      }

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      res.status(200).json({
        status: 'success', // ‡πÄ‡∏û‡∏¥‡πà‡∏° status
        message: `‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ "${quotaName}" ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
        deletedId: id // ‡∏™‡πà‡∏á id ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô update UI ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
      });
    });
  });
});


// API: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
app.post('/settingBorrowData', (req, res) => {
  const { start, end } = req.body;

  if (!start || !end) {
    res.status(400).json({ error: 'Start and end dates are required.' });
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const latestQuery = 'SELECT * FROM control_request ORDER BY control_id DESC LIMIT 1';

  connection.beginTransaction((err) => { // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô transaction
    if (err) {
      console.error('Error starting transaction:', err);
      return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô transaction' });
    }

    connection.query(latestQuery, (err, results) => {
      if (err) {
        return connection.rollback(() => { // rollback transaction ‡∏´‡∏≤‡∏Å‡∏°‡∏µ error
          console.error('Error executing query:', err);
          return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' });
        });
      }

      const latestData = results[0];
      let latestEnd = null;

      try {
        latestEnd = latestData ? new Date(latestData.end) : null;
      } catch (dateError) {
        return connection.rollback(() => {
          console.error('Error parsing date:', dateError);
          return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' });
        });
      }

      const newStart = new Date(start);

      if (latestEnd && newStart <= latestEnd) {
        return connection.rollback(() => {
          return res.status(400).json({ status: 'error', message: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' });
        });
      }

      const insertQuery = 'INSERT INTO control_request (start, end) VALUES (?, ?)';

      connection.query(insertQuery, [start, end], (err, result) => {
        if (err) {
          return connection.rollback(() => {
            console.error('Error inserting data:', err);
            return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
          });
        }

        connection.commit((err) => { // commit transaction ‡∏´‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          if (err) {
            return connection.rollback(() => {
              console.error('Error committing transaction:', err);
              return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°' });
            });
          }

          res.status(201).json({
            message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            data: { start, end}
          });
        });
      });
    });
  });
});


// API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
app.get('/settingBorrowData', (req, res) => {
  const query = 'SELECT * FROM control_request ORDER BY control_id DESC LIMIT 1';
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching faculties:', err);
      res.status(500).send('Error fetching faculties');
      return;
    }
    res.json(results);
  });
});


// API: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SN
app.post('/editDetailNB', (req, res) => {
  const { laptop_tag, ...updateFields } = req.body;
  
  if (!laptop_tag) {
    return res.status(400).json({ error: 'Please provide laptop_tag' });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á dynamic query
  const fields = Object.keys(updateFields);
  if (fields.length === 0) {
    return res.status(400).json({ error: 'No fields provided to update' });
  }

  const setClause = fields.map(field => `${field} = ?`).join(', ');
  const values = fields.map(field => updateFields[field]);
  values.push(laptop_tag); // ‡πÄ‡∏û‡∏¥‡πà‡∏° laptop_tag ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE

  const query = `UPDATE laptop SET ${setClause} WHERE laptop_tag = ?`;
  
  connection.query(query, values, (err, result) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: 'Error updating laptop details' });
    }

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Laptop tag not found in the system' });
    }

    res.json({ message: 'Laptop details updated successfully' });
  });
});



app.get('/report', (req, res) => {
  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏™‡∏°
  const borrowQuery = `
      SELECT DISTINCT b.stu_id, sd.stu_faculty, COALESCE(f.id, 0) AS faculty_id
      FROM borrow b
      JOIN studentdetail sd ON b.stu_id = sd.stu_id
      LEFT JOIN faculty_subject fs ON sd.stu_faculty = fs.subjectId  
      LEFT JOIN faculty f ON fs.facultyId = f.id  
      WHERE b.status IN ('‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')
  `;

  connection.query(borrowQuery, (err, results) => {
    if (err) {
      console.error('Error fetching borrow data:', err);
      return res.status(500).json({ message: 'Internal server error' });
    }

    const stuIdsByFaculty = {};
    results.forEach(row => {
      const stuId = row.stu_id;
      const facultyId = row.faculty_id;

      if (!stuIdsByFaculty[facultyId]) {
        stuIdsByFaculty[facultyId] = new Set();
      }
      stuIdsByFaculty[facultyId].add(stuId);
    });

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    const laptopQuery = `
      SELECT COUNT(*) AS totalAvailableLaptops 
      FROM laptop 
      WHERE status != '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    `;

    connection.query(laptopQuery, (err, laptopResult) => {
      if (err) {
        console.error('Error fetching laptop count:', err);
        return res.status(500).json({ message: 'Internal server error' });
      }

      const totalFacultyMembers = laptopResult[0].totalAvailableLaptops;

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á
      const reserveQuery = `
        SELECT COUNT(*) AS reserve 
        FROM laptop 
        WHERE status != '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' AND brand = '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á'
      `;

      connection.query(reserveQuery, (err, reserveResult) => {
        if (err) {
          console.error('Error fetching reserve count:', err);
          return res.status(500).json({ message: 'Internal server error' });
        }

        const reserve = reserveResult[0].reserve;

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞
        const facultyQuery = `SELECT id, faculty_name, faculty_engName, number FROM faculty`;

        connection.query(facultyQuery, (err, facultyResults) => {
          if (err) {
            console.error('Error fetching faculty data:', err);
            return res.status(500).json({ message: 'Internal server error' });
          }

          let total = 0;
          let facultyCount = 0;
          const facultySummary = {};

          facultyResults.forEach(faculty => {
            const facultyId = faculty.id;
            const facultyKey = faculty.faculty_engName;
            const facultyName = faculty.faculty_name;
            const facultyQuota = faculty.number;
            const uniqueStuCount = stuIdsByFaculty[facultyId] ? stuIdsByFaculty[facultyId].size : 0;

            if (uniqueStuCount > 0) {
              facultyCount++;
            }

            facultySummary[facultyKey] = {
              name: facultyName,
              borrowed: uniqueStuCount,
              quota: facultyQuota
            };
            total += uniqueStuCount;
          });

          // ‚úÖ remaining ‡∏à‡∏∞‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ (‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
          const remainingQuery = `
            SELECT COUNT(*) AS remainingLaptops
            FROM laptop
            WHERE status = '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' OR status = '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
          `;

          connection.query(remainingQuery, (err, remainingResult) => {
            if (err) {
              console.error('Error fetching remaining laptops:', err);
              return res.status(500).json({ message: 'Internal server error' });
            }

            const remainingLaptops = remainingResult[0].remainingLaptops;

            res.json({
              total: total,  
              availableLaptops: totalFacultyMembers,  
              reserve: reserve,
              remaining: remainingLaptops,  
              facultySummary: facultySummary,
              facultyCount: facultyCount,
            });
          });
        });
      });
    });
  });
});



// API: ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ô‡∏®.
app.delete('/deleteRequestStudent', (req, res) => {
  const { borrow_id } = req.body; // Expect borrow_id in request body

  if (!borrow_id) {
    return res.status(400).json({ message: 'Missing borrow_id in request body.' });
  }

  // Query to check the status of the borrow entry
  connection.query('SELECT status FROM borrow WHERE borrow_id = ?', [borrow_id], (err, results) => {
    if (err) {
      console.error(err);
      return res.status(500).json({ message: 'Error querying database.' });
    }

    if (results.length === 0) {
      return res.status(404).json({ message: 'Borrow request not found.' });
    }

    const borrow = results[0];
    const validStatuses = ['‡∏£‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'];

    // Check if the status allows deletion
    if (!validStatuses.includes(borrow.status)) {
      return res.status(400).json({ message: 'Cannot delete borrow request with the current status.' });
    }

    connection.query('DELETE FROM borrow WHERE borrow_id = ?', [borrow_id], (deleteErr, deleteResult) => {
      if (deleteErr) {
        console.error(deleteErr);
        return res.status(500).json({
          status: 'error', // ‡πÄ‡∏û‡∏¥‡πà‡∏° status ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ frontend ‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡πÑ‡∏î‡πâ
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠' // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
        });
      }

      if (deleteResult.affectedRows > 0) {
        res.status(200).json({
          status: 'success', // ‡πÄ‡∏û‡∏¥‡πà‡∏° status
          message: '‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
        });
      } else {
        res.status(404).json({
          status: 'error', // ‡πÄ‡∏û‡∏¥‡πà‡∏° status ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô error ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠' // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
        });
      }
    });
  });
});


/**************************************************************************************************** */

const uploadReport = multer({ storage: storageReport });

app.post("/uploadReport", uploadReport.single("file"), async (req, res) => {
  if (!req.file) return res.json({ success: false, message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå" });

  const filePath = `/reports/${req.file.filename}`;
  const fileName = req.file.filename;
  const reportDate = new Date().toISOString().split("T")[0]; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô YYYY-MM-DD

  try {

    const insertQuery = 'INSERT INTO report (fileName, reportDate, filepath) VALUES (?, ?, ?)';
    connection.query(insertQuery, [fileName, reportDate, filePath], (err, result) => {
      if (err) {
        return connection.rollback(() => {
          console.error('Error inserting data:', err);
          return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        });
      }

    res.json({ success: true, filepath: filePath });
  });
  } catch (error) {
    console.error("‚ùå DB Error:", error);
    res.json({ success: false, message: "DB Error" });
  }
});

app.get('/reportFile', (req, res) => {
  const query = `
    SELECT * FROM report
    WHERE id IN (
      SELECT MAX(id) FROM report
      GROUP BY fileName
    )
  `;
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching report files:', err);
      res.status(500).send('Error fetching report files');
      return;
    }
    res.json(results);
  });
});


// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
app.get("/downloadReport/:fileName", (req, res) => {
  const filePath = path.join(__dirname, "/reports", req.params.fileName);
  if (fs.existsSync(filePath)) {
    res.download(filePath);
  } else {
    res.status(404).json({ success: false, message: "File not found" });
  }
});

// ************************************************************************************** //

const uploadReportReturnLate = multer({ storage: storageReLate });

app.post("/uploadReportReLate", uploadReportReturnLate.single("file"), async (req, res) => {
  if (!req.file) return res.json({ success: false, message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå" });

  const filePath = `/reports_return_late/${req.file.filename}`;
  const fileName = req.file.filename;
  const reportDate = new Date().toISOString().split("T")[0]; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô YYYY-MM-DD

  try {

    const insertQuery = 'INSERT INTO report_return_late (fileName, reportDate, filepath) VALUES (?, ?, ?)';
    connection.query(insertQuery, [fileName, reportDate, filePath], (err, result) => {
      if (err) {
        return connection.rollback(() => {
          console.error('Error inserting data:', err);
          return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        });
      }

    res.json({ success: true, filepath: filePath });
  });
  } catch (error) {
    console.error("‚ùå DB Error:", error);
    res.json({ success: false, message: "DB Error" });
  }
});

app.get('/reportFileReLate', (req, res) => {
  const query = `
    SELECT * FROM report_return_late
WHERE id IN (
  SELECT MAX(id) FROM report_return_late
  GROUP BY fileName
);

    
  `;
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching report files:', err);
      res.status(500).send('Error fetching report files');
      return;
    }
    res.json(results);
  });
});


// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
app.get("/downloadReportReLate/:fileName", (req, res) => {
  const filePath = path.join(__dirname, "reports_return_late", req.params.fileName);
  console.log("File path:", filePath); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
  if (fs.existsSync(filePath)) {
    res.download(filePath);
  } else {
    res.status(404).json({ success: false, message: "File not found" });
  }
});


app.use(express.json());
app.use(express.urlencoded({ extended: true }));
//app.use(fileUpload()); // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ express-fileupload
app.use('/reports', express.static(path.join(__dirname, 'reports'))); // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å frontend
app.use('/reports_Return_Late', express.static(path.join(__dirname, 'reports_Return_Late'))); // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å frontend


